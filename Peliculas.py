import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
import random

# Leer datos
df = pd.read_excel("peliculas_series.xlsx")

# Asegurar que los tipos de datos sean correctos
df['A√±o'] = pd.to_numeric(df['A√±o'], errors='coerce')
df['Duraci√≥n'] = pd.to_numeric(df['Duraci√≥n'], errors='coerce')
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')
df['¬øMugui?'] = df['¬øMugui?'].fillna(False).astype(bool)
df['¬øPunti?'] = df['¬øPunti?'].fillna(False).astype(bool)

# Sidebar: Filtros
st.sidebar.markdown("## üé¨ Filtros")

generos = st.sidebar.multiselect("G√©nero", sorted(df['G√©nero'].dropna().unique()))
plataformas = st.sidebar.multiselect("Plataforma", sorted(df['Plataforma'].dropna().unique()))
a√±o_min, a√±o_max = int(df['A√±o'].min()), int(df['A√±o'].max())
rango_a√±os = st.sidebar.slider("A√±o", min_value=a√±o_min, max_value=a√±o_max, value=(a√±o_min, a√±o_max))
excluir_mugui = st.sidebar.checkbox("‚ùå Excluir vistas por Mugui")
excluir_punti = st.sidebar.checkbox("‚ùå Excluir vistas por Punti")

ordenar_por = st.sidebar.selectbox("Ordenar por", ["Nombre", "A√±o", "Duraci√≥n", "Rating"])
orden_ascendente = st.sidebar.radio("Orden", ["Ascendente", "Descendente"]) == "Ascendente"

# Aplicar filtros
df_filtrado = df.copy()
if generos:
    df_filtrado = df_filtrado[df_filtrado['G√©nero'].isin(generos)]
if plataformas:
    df_filtrado = df_filtrado[df_filtrado['Plataforma'].str.contains('|'.join(plataformas), na=False)]
df_filtrado = df_filtrado[(df_filtrado['A√±o'] >= rango_a√±os[0]) & (df_filtrado['A√±o'] <= rango_a√±os[1])]
if excluir_mugui:
    df_filtrado = df_filtrado[df_filtrado['¬øMugui?'] == False]
if excluir_punti:
    df_filtrado = df_filtrado[df_filtrado['¬øPunti?'] == False]

# Ordenar
if ordenar_por in df_filtrado.columns:
    df_filtrado = df_filtrado.sort_values(by=ordenar_por, ascending=orden_ascendente)

# Mostrar t√≠tulo
st.markdown("## üé• Buscador de Pel√≠culas Chinguis")

# Mostrar tabla editable (solo columnas de checkboxes)
gb = GridOptionsBuilder.from_dataframe(df_filtrado)
gb.configure_column("¬øMugui?", editable=True, cellEditor='agCheckboxCellEditor')
gb.configure_column("¬øPunti?", editable=True, cellEditor='agCheckboxCellEditor')
gb.configure_columns(
    [col for col in df_filtrado.columns if col not in ['¬øMugui?', '¬øPunti?']],
    editable=False
)
grid_options = gb.build()

grid_response = AgGrid(
    df_filtrado,
    gridOptions=grid_options,
    update_mode=GridUpdateMode.VALUE_CHANGED,
    fit_columns_on_grid_load=True,
    height=450
)

# Guardar cambios
df_actualizado = grid_response['data']
if not df_actualizado.equals(df_filtrado):
    for idx, row in df_actualizado.iterrows():
        original_idx = df[df["Nombre"] == row["Nombre"]].index
        if not original_idx.empty:
            df.loc[original_idx, '¬øMugui?'] = row['¬øMugui?']
            df.loc[original_idx, '¬øPunti?'] = row['¬øPunti?']
    df.to_excel("peliculas_series.xlsx", index=False)

# Pel√≠cula al azar
if st.button("üçø Mostrar una pel√≠cula al azar"):
    if not df_filtrado.empty:
        peli = df_filtrado.sample(1).iloc[0]
        st.markdown(f"### üçø Pel√≠cula sugerida:")
        st.markdown(f"- üé¨ **Nombre:** {peli['Nombre']}")
        st.markdown(f"- üìÖ **A√±o:** {peli['A√±o']}")
        st.markdown(f"- ‚è±Ô∏è **Duraci√≥n:** {peli['Duraci√≥n']} min")
        st.markdown(f"- ‚≠ê **Rating:** {peli['Rating']}")
        st.markdown(f"-
